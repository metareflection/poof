% ThingLab https://github.com/cdglabs/thinglab

% 1979 https://constraints.cs.washington.edu/ui/thinglab-tr.pdf

% TODO: trace prototypes back to earlier Actor systems???
%
% Bobrow, Daniel G., and Winograd. Terry, "An Overview of KRL, A Knowledge Representation Language". Cognitive Science, V. 1, No. 1, 1977.
%
% Hewitt, Carl, Viewing Control Structures as Patterns of Passing Messages, MIT AI Lab Memo 410, Dec 1976.

% Adding POP to Nixpkgs:
% https://github.com/NixOS/rfcs/pull/91/
% https://github.com/NixOS/nixpkgs/pull/116275
% https://github.com/divnix/POP

% Gilad Bracha's Newspeak? It's class-based only, though.

% C2 wiki?
% https://wiki.c2.com/?PrototypeBasedProgramming
% https://wiki.c2.com/?ClassesPrototypesComparison
% https://wiki.c2.com/?PrototypeBasedLanguage
% "Popular" Prototype language: NewtonScript, LambdaMOO, Io, REBOL, Lua...

% Simula in 1966 has processes and more but does NOT have OO
@article{Simula1966,
  author = {Dahl, Ole-Johan and Nygaard, Kristen},
  title = {SIMULA: An ALGOL-Based Simulation Language},
  year = {1966},
  issue_date = {Sept. 1966},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {9},
  number = {9},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/365813.365819},
  doi = {10.1145/365813.365819},
  abstract = {This paper is an introduction to SIMULA, a programming language designed to provide a systems analyst with unified concepts which facilitate the concise description of discrete event systems. A system description also serves as a source language simulation program. SIMULA is an extension of ALGOL 60 in which the most important new concept is that of quasi-parallel processing.},
  journal = {Commun. ACM},
  month = {sep},
  pages = {671–678},
  numpages = {8}
}

@Misc{Strachey67,
  Author = {Christopher Strachey},
  Title = {Fundamental Concepts in Programming Languages},
  Year = {1967},
  %url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.332.3161},
}

% This is the one that introduces objects and prefix classes
@Misc{Simula1968,
  Author = {Ole-Johan Dahl and Bjørn Myhrhaug and Kristen Nygaard},
  Title = {SIMULA 67 Common Base Language},
  Year = {1968}
}
% Norwegian Computing Center
% https://web.archive.org/web/20131225084408/http://www.edelweb.fr/Simula/scb-1.pdf

% 10.1145/1024273.1024278
@InProceedings{Kahn1976,
  author = {Kahn, Kenneth Michael},
  title = {An Actor-Based Computer Animation Language},
  year = {1976},
  isbn = {9781450377898},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/1024273.1024278},
  doi = {10.1145/1024273.1024278},
  abstract = {This paper describes a computer language based upon actor semantics designed especially for computer graphics and animation. The thesis that animation is best facilitated by considering each entity on the display screen as an independent process is discussed and demonstrated by examples. The system is built upon MacLisp and is compatible with Lisp-Logo. The language is designed to be used by both very sophisticated programmers and by school children.},
  booktitle = {Proceedings of the ACM/SIGGRAPH Workshop on User-Oriented Design of Interactive Graphics Systems},
  pages = {37–43},
  numpages = {7},
  location = {Pittsburgh, PA},
  series = {UODIGS '76},
  url2 = {https://dspace.mit.edu/handle/1721.1/41950},
}

@InProceedings{Borning1977,
  author = {Alan Hamilton Borning},
  title = {{ThingLab} --- an Object-Oriented System for Building Simulations using Constraints},
  booktitle={5th International Conference on Artificial Intelligence},
  pages={497--498},
  month = {August},
  year = {1977},
  %url = {https://www.ijcai.org/Proceedings/77-1/Papers/085.pdf}
}

@PhDThesis{Borning1979,
  author = {Borning, Alan Hamilton},
  title = {{ThingLab} --- A Constraint-Oriented Simulation Laboratory},
  biburl = {https://www.bibsonomy.org/bibtex/263cae088243a5fd341d7d634d8176bb3/n770},
  publisher = {Palo Alto Research Center XEROX},
  %url = {https://constraints.cs.washington.edu/ui/thinglab-tr.pdf},
  school = {Stanford University},
  year = 1979
}

@PhDThesis{Kahn1979,
  title = {Creation of computer animation from story descriptions},
  author = {Kahn, Kenneth Michael},
  school = {MIT},
  year = {1979},
  %url = {https://dspace.mit.edu/handle/1721.1/16012}
}

% http://worrydream.com/refs/Borning%20-%20The%20Programming%20Language%20Aspects%20of%20ThingLab.pdf
% https://dl.acm.org/doi/abs/10.1145/357146.357147
@Article{Borning1981,
  author = {Borning, Alan Hamilton},
  title = {The Programming Language Aspects of ThingLab, a Constraint-Oriented Simulation Laboratory},
  year = {1981},
  issue_date = {Oct. 1981},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {3},
  number = {4},
  issn = {0164-0925},
  url = {https://doi.org/10.1145/357146.357147},
  doi = {10.1145/357146.357147},
  journal = {ACM Trans. Program. Lang. Syst.},
  month = oct,
  pages = {353--387},
  numpages = {35}
}

% Norman I. Adams, IV -- but the IV doesn't get processed correctly
@InProceedings{Rees82t:a,
  author = {Jonathan A. Rees and Norman I. Adams},
  title = {T: a dialect of LISP or, Lambda: the ultimate software tool},
  booktitle = {Symposium on Lisp and Functional Programming, ACM},
  pages = {114--122},
  year = {1982}
}

@Misc{Cannon82,
  title={Flavors: A non-hierarchical approach to object-oriented programming},
  author={Howard Cannon},
  publisher={Symbolics Inc.},
  year={1982}
}

% After discussing multiple inheritance informally, omits it completely from the formal treatment,
% but does introduce a framework for subtyping of a lambda-calculus with records and fixed-points.
@InProceedings{Cardelli1984ASO,
  title={A Semantics of Multiple Inheritance},
  author={Luca Cardelli},
  booktitle={Information and Computation},
  year={1984},
  url={https://api.semanticscholar.org/CorpusID:13032155}
}

% https://homepages.cwi.nl/~storm/teaching/reader/Lieberman86.pdf
@InProceedings{Lieberman1986,
  title={Using Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems},
  author={Henry Lieberman},
  booktitle={OOPLSA},
  pages={214--223},
  year={1986},
}

@InProceedings{Borning1986,
  title={Classes Versus Prototypes in Object-Oriented Languages},
  author={Alan Hamilton Borning},
  booktitle={1986 Fall Joint Computer Conference},
  pages={36--40},
  year={1986},
}

% Also a 1985 report
@Article{bobrow86commonloops,
  title={CommonLoops: Merging Lisp and Object-Oriented Programming},
  author={Daniel G. Bobrow and Kenneth Kahn and Gregor Kiczales and Larry Masinter and Mark Stefyk and Frank Zdybel},
  journal={OOPSLA},
  year={1986}
}

@article{kristensen1987beta,
  title={The BETA programming language},
  author={Kristensen, Bent Bruun and Madsen, Ole Lehrmann and M{\o}ller-Pedersen, Birger and Nygaard, Kristen},
  journal={DAIMI Report Series},
  number={229},
  year={1987}
}

@Article{bobrow88clos,
  title={Common Lisp Object Specification X3J13},
  author={D. G. Bobrow and L. D. DeMichiel and R. P. Gabriel and S. E. Kleene and G. Kiczales and D. A. Moon},
  journal={SIGPLAN Notices 23 (Special Issue)},
  year={1988}
}

@InProceedings{Kamin1988,
  title={Inheritance in smalltalk-80: a denotational definition},
  author={Samuel N. Kamin},
  booktitle={POPL '88},
  year={1988}
}

% https://core.ac.uk/download/pdf/42828491.pdf
@InProceedings{ObjectsAsClosures,
  author = {Reddy, Uday},
  title = {Objects as Closures - Abstract Semantics of Object Oriented Languages},
  booktitle = {ACM Symposium on LISP and Functional Programming},
  %month = {02},
  pages = {289–-297},
  doi = {10.1145/62678.62721},
  year = {1988},
}

@InProceedings{adams88oopscheme,
  Author = {Norman Adams and Jonathan Rees},
  Title = {Object-Oriented Programming in Scheme},
  %url = "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.954",
  booktitle = {ACM Conference on Lisp and Functional Programming},
  pages = {277--288},
  Year = {1988}
}

@InProceedings{chambers1989efficient,
  author = {Chambers, C. and Ungar, D. and Lee, E.},
  title = {An Efficient Implementation of SELF a Dynamically-Typed Object-Oriented Language Based on Prototypes},
  year = {1989},
  isbn = {0897913337},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  %url = {https://doi.org/10.1145/74877.74884},
  doi = {10.1145/74877.74884},
  abstract = {We have developed and implemented techniques that double the performance of dynamically-typed object-oriented languages. Our SELF implementation runs twice as fast as the fastest Smalltalk implementation, despite SELF's lack of classes and explicit variables.To compensate for the absence of classes, our system uses implementation-level maps to transparently group objects cloned from the same prototype, providing data type information and eliminating the apparent space overhead for prototype-based systems. To compensate for dynamic typing, user-defined control structures, and the lack of explicit variables, our system dynamically compiles multiple versions of a source method, each customized according to its receiver's map. Within each version the type of the receiver is fixed, and thus the compiler can statically bind and inline all messages sent to self. Message splitting and type prediction extract and preserve even more static type information, allowing the compiler to inline many other messages. Inlining dramatically improves performance and eliminates the need to hard-wire low-level methods such as +,==, and ifTrue:.Despite inlining and other optimizations, our system still supports interactive programming environments. The system traverses internal dependency lists to invalidate all compiled methods affected by a programming change. The debugger reconstructs inlined stack frames from compiler-generated debugging information, making inlining invisible to the SELF programmer.},
  booktitle = {Conference Proceedings on Object-Oriented Programming Systems, Languages and Applications},
  pages = {49–70},
  numpages = {22},
  location = {New Orleans, Louisiana, USA},
  series = {OOPSLA '89}
}

@PhDThesis{Cook1989,
    author = {William R. Cook},
    title = {A Denotational Semantics of Inheritance},
    school = {Brown University},
    year = {1989},
    %url = {https://www.cs.utexas.edu/~wcook/papers/thesis/cook89.pdf}
}

% Not obviously worth citing in this context?
% @TechReport ?
@Misc{Lawall89SelfInScheme,
  Author = {Julia L. Lawall and Daniel P. Friedman},
  Title = {Embedding the Self Language in Scheme},
  %url = "https://legacy.cs.indiana.edu/ftp/techreports/TR276.pdf",
  Year = {1989}
}

% https://okmij.org/ftp/Computation/typeclass.html#Kaes

% Kaes ESOP 1988
% Stefan Kaes: Parametric overloading in polymorphic programming languages
%Proc. ESOP 1988, Springer's LNCS 300, pp. 131-144
% <http://link.springer.com/chapter/10.1007%2F3-540-19027-9_9>

% Stefan Kaes: Parametrischer Polymorphismus, Ueberladungen und Konversionen
% Dissertation: TU Darmstadt, Fachbereich Informatik, 2005
% <http://tuprints.ulb.tu-darmstadt.de/epda/000544/>

% A History of Haskell: being lazy with class
% Simon Peyton Jones
% The Third ACM SIGPLAN History of Programming Languages Conference (HOPL-III) | June 2007
% https://www.microsoft.com/en-us/research/publication/a-history-of-haskell-being-lazy-with-class/

% Haskell's overlooked object system
% Oleg Kiselyov, Ralf Laemmel
% https://arxiv.org/abs/cs/0509027
% 2005

% Introduction of Typeclasses
% https://www.research.ed.ac.uk/en/publications/how-to-make-ad-hoc-polymorphism-less-ad-hoc
@InProceedings{typeclasses,
  title = "How to make ad-hoc polymorphism less ad hoc",
  abstract = "This paper presents type classes, a new approach to ad-hoc polymorphism. Type classes permit overloading of arithmetic operators such as multiplication, and generalise the {"}eqtype variables{"} of Standard ML. Type classes extend the Hindley/Milner polymorphic type system, and provide a new approach to issues that arise in object-oriented programming, bounded type quantification, and abstract data types. This paper provides an informal introduction to type classes, and defines them formally by means of type inference rules. ",
  author = "P. Wadler and S. Blott",
  year = "1989",
  doi = "10.1145/75277.75283",
  language = "English",
  isbn = "0-89791-294-2",
  pages = "60--76",
  booktitle = "POPL '89 Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages",
  publisher = "ACM"
}

% 10.1145/97946.97982
% https://www.semanticscholar.org/paper/Mixin-based-inheritance-Bracha-Cook/cbc4f2d93bb62d1c287f4fe458de6ac416379282
% https://bracha.org/oopsla90.pdf
% url = {https://doi.org/10.1145/97945.97982},
@InProceedings{bracha1990mixin,
  author = {Bracha, Gilad and Cook, William},
  title = {Mixin-Based Inheritance},
  year = {1990},
  issue_date = {Oct. 1990},
  isbn = {0897914112},
  volume = {25},
  number = {10},
  issn = {0362-1340},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/97945.97982},
  abstract = {The diverse inheritance mechanisms provided by Smalltalk, Beta, and CLOS are interpreted as different uses of a single underlying construct. Smalltalk and Beta differ primarily in the direction of class hierarchy growth. These inheritance mechanisms are subsumed in a new inheritance model based on composition of mixins, or abstract subclasses. This form of inheritance can also encode a CLOS multiple-inheritance hierarchy, although changes to the encoded hierarchy that would violate encapsulation are difficult. Practical application of mixin-based inheritance is illustrated in a sketch of an extension to Modula-3.},
  booktitle = {Proceedings of the European Conference on Object-Oriented Programming on Object-Oriented Programming Systems, Languages, and Applications},
  pages = {303–311},
  numpages = {9},
  location = {Ottawa, Canada},
  series = {OOPSLA/ECOOP '90},
  journal = {SIGPLAN Not.},
  month = sep,
  pages = {303–311},
  numpages = {9}
}

@Article{gabriel1991clos,
  title={CLOS: Integrating object-oriented and functional programming},
  author={Gabriel, Richard P and White, Jon L and Bobrow, Daniel G},
  journal={Communications of the ACM},
  volume={34},
  number={9},
  pages={29--38},
  year={1991},
  publisher={ACM New York, NY, USA}
}

@Book{amop,
  Title={The {A}rt of the {M}eta-{O}bject {P}rotocol},
  Author={Kiczales, Gregor and Des Rivières, Jim and Bobrow, Daniel Gureasko},
  Year={1991},
  Publisher={MIT press}
}

%@InProceedings{Ungar91organizingprograms,
%  Title = {Organizing Programs Without Classes},
%  author = {David Ungar and Craig Chambers and Bay-Wei Chang and Urs Hölzle},
%  journal = {Lisp and Symbolic Computation},
%  year = {1991},
%  pages = {223--242},
%  publisher = {Kluwer Academic Publishers}
%}

@TechReport{eppl91,
  Author={Matthias Felleisen},
  Title={On the Expressive Power of Programming Languages},
  Institution={Rice University},
  Year={1991},
}
%  Note={\myurl{http://www.cs.rice.edu/CS/PLT/Publications/}}


@PhDThesis{bracha1992jigsaw,
  author = {Gilad Bracha},
  title = {The Programming Language Jigsaw: Mixins, Modularity and Multiple Inheritance},
  school = {University of Utah},
  year = {1992}
}

@Article{dickey1992scheming,
  title={Scheming with objects},
  author={Dickey, Ken},
  %url={http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/scheme/oop/yasos/swob.txt},
  journal={AI Expert},
  volume={7},
  number={10},
  pages={24--33},
  year={1992}
}

@InProceedings{chambers92objectoriented,
  author = {Craig Chambers},
  title = {Object-oriented multi-methods in Cecil},
  booktitle = {Proceedings of the 6th European Conference on Object-Oriented Programming ({ECOOP})},
  volume = "615",
  publisher = "Springer-Verlag",
  address = "Berlin, Heidelberg, New York, Tokyo",
  editor = "Ole Lehrmann Madsen",
  isbn = "3-540-55668-0",
  pages = "33--56",
  year = "1992",
  %url = "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.121.134"
}

@InProceedings{ImplementingTypeClasses,
  title = "Implementing Type Classes",
  author = "John Peterson and Mark Jones",
  booktitle = "Proceedings of ACM SIGPLAN Symposium on Programming Language Design and Implementation",
  year = "1993",
  %url = "http://web.cecs.pdx.edu/~mpj/pubs/pldi93.html",
  publisher = {Elsevier Science},
}
% http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.53.3952

% https://www.cs.bham.ac.uk/~udr/papers/oosem.pdf
% University of Illinois at Urbana-Champaign
% October 4, 1993
@InProceedings{Kamin1994TwoSM,
  title={Two semantic models of object-oriented languages},
  author={Samuel N. Kamin and Uday S. Reddy},
  year={1994},
  url={https://api.semanticscholar.org/CorpusID:16832709}
}

@Article{Cook1994,
  title={A Denotational Semantics of Inheritance and Its Correctness},
  author={W. Cook and J. Palsberg},
  journal={Information and Computation},
  year={1994},
  volume={114},
  pages={329--350},
  %url = {https://www.cs.utexas.edu/~wcook/papers/ic94/ic94.pdf}
}

@Misc{Barrett96amonotonic,
  author = {Kim Barrett and Bob Cassels and Paul Haahr and David A. Moon and Keith Playford and P. Tucker Withington},
  title = {A Monotonic Superclass Linearization for Dylan},
  year = {1996},
  %url = {https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.19.3910}
}

@Book{Abadi97atheory,
  author = {Martín Abadi and Luca Cardelli},
  title = {A theory of objects},
  year = {1997}
}

@InProceedings{aop97,
  author = {Kiczales, G. and Lamping, J. and Mendhekar, A. and Maeda, C. and Lopes, C. and Loingtier, J. M. and Irwin, J.},
  title = {Aspect-oriented programming},
  booktitle = {11th European Conference on Object-Oriented Programming ({ECOOP})},
  pages = {220--242},
  year = {1997}
}

% CBPV
@InProceedings{conf/tlca/Levy99,
  title = {Call-by-Push-Value: A Subsuming Paradigm.},
  year = {1999},
  author = {Blain Levy, Paul},
  publisher = {Springer},
  booktitle = {Typed Lambda Calculi and Applications, 4th International Conference, TLCA'99, L'Aquila, Italy, April 7-9, 1999, Proceedings}
}

@Misc{ecmascript,
  title={ECMAScript Language Specification},
  author={ECMA, Final Draft},
  year={1999}
}

% 2000 Oleg Kiselyov USENET post on okmij.org on the possibility of a pure variant of YASOS ?

% See notably chapter 32.
@Book{tapl,
  Author = {Pierce, Benjamin C.},
  Title = {Types and Programming Languages},
  Year = {2002},
  ISBN = {0262162091},
  Publisher = {MIT Press},
  Edition = {1st},
}

@InProceedings{Salzman05prototypeswith,
  author = {Lee Salzman and Jonathan Aldrich},
  title = {Prototypes with multiple dispatch: An expressive and dynamic object model},
  booktitle = {ECOOP 2005, Proceedings, LNCS},
  year = {2005}
}

@InProceedings{Flatt06schemewith,
  author = {Matthew Flatt and Robert Bruce Findler and Matthias Felleisen},
  title = {Scheme with classes, mixins, and traits},
  booktitle = {In Asian Symposium on Programming Languages and Systems (APLAS) 2006},
  year = {2006},
  pages = {270--289}
}

@InProceedings{BruceCardelliPierce2006,
    author = {Kim B. Bruce and Luca Cardelli and Benjamin C. Pierce},
    title = {Comparing Object Encodings},
    booktitle = {Journal of Functional Programming},
    volume = {16},
    pages = {375-–414},
    year = {2006},
}
% http://citeseerx.ist.psu.edu/viewdoc/similar?doi=10.1.1.211.6777&type=cc

% NB: Extended version of the seminal 2005 TOPLAS paper.
% For a history of lenses, see Jules Hedges' https://julesh.com/2018/08/16/lenses-for-philosophers/
@Article{Foster2007CombinatorsFB,
  title={Combinators for bidirectional tree transformations: A linguistic approach to the view-update problem},
  author={Nate Foster and M. Greenwald and J. T. Moore and B. Pierce and A. Schmitt},
  journal={ACM Trans. Program. Lang. Syst.},
  year={2007},
  volume={29}
}

% Master Thesis
@TechReport{gclviewer2008,
  Author = "Ibrahim Bokharouss",
  Title = "GCL Viewer: a study in improving the understanding of GCL programs",
  Institution = {Eindhoven University of Technology},
  year = 2008,
  url = {https://research.tue.nl/en/studentTheses/gcl-viewer}
  }
% https://pure.tue.nl/ws/portalfiles/portal/46927079/638953-1.pdf

@InProceedings{dolstra2008nixos,
  title={NixOS: A purely functional Linux distribution},
  author={Dolstra, Eelco and L{\"o}h, Andres},
  booktitle={Proceedings of the 13th ACM SIGPLAN international conference on Functional programming},
  pages={367--378},
  year={2008}
}

@Misc{nix2015,
  title={Nixpkgs fixed-points library},
  author={Peter Simons},
  url={https://github.com/NixOS/nixpkgs/blob/master/lib/fixed-points.nix},
  year={2015},
  urldate={2023-11-29}
}

% April 2
@Misc{minsky08,
  author = {Yaron Minsky},
  title = {The {ML} sweet spot},
  year = 2008,
  %url = {https://blog.janestreet.com/the-ml-sweet-spot/},
  urldate = {2021-03-14}
}

@InProceedings{Brown_functioninheritance:,
  author = {Daniel Brown and William R. Cook},
  title = {Function Inheritance: Monadic Memoization Mixins},
  booktitle = {Brazilian Symposium on Programming Languages},
  year = {2009},
}

% Unpublished
@Misc{MonadsMixins,
  title = "The Different Aspects of Monads and Mixins",
  author = "Oliveira, Bruno C. d. S.",
  year = {2009},
  %url = {http://ropas.snu.ac.kr/%7Ebruno/papers/MixinAspects.pdf},
}

@InProceedings{Oliveira10effectiveadvice,
  author = {Oliveira, Bruno C. d. S. and Schrijvers, Tom and Cook, William R.},
  title = {EffectiveAdvice: disciplined advice with explicit effects},
  booktitle = {AOSD’10: 9th International Conference on Aspect-Oriented Software Development},
  pages = {109--120},
  year = {2010}
}

@InProceedings{LIL2012,
  author = {François-René Rideau},
  title = {{LIL}: {CLOS} ~ Reaches Higher-Order, Sheds Identity and has a Transformative Experience},
  %url = "http://github.com/fare/lil-ilc2012/",
  booktitle = {International Lisp Conference},
  year = 2012
}

@Misc{jsonnet,
  author = {Dave Cunningham},
  title = {Jsonnet},
  year = 2014,
  url = {https://jsonnet.org},
  urldate = {2021-03-11}
}

@Book{EcmaScript:15,
  added-at = {2015-08-28T15:36:26.000+0200},
  address = {Geneva},
  author = {{Ecma International}},
  biburl = {https://www.bibsonomy.org/bibtex/28d67e2ebf933f3b6f684fcfb1f53b020/gron},
  edition = {6th},
  interhash = {8212a5bb4b7ac3137534f10d599cb526},
  intrahash = {8d67e2ebf933f3b6f684fcfb1f53b020},
  keywords = {JavaScript spec specification},
  month = {June},
  timestamp = {2015-08-28T15:37:30.000+0200},
  title = {{ECMAScript 2015 Language Specification}},
  %url = {http://www.ecma-international.org/ecma-262/6.0/ECMA-262.pdf},
  year = 2015
}

% This article is great in desugaring the prototype sublanguage of JS,
% but doesn't cover classes.
@Article{DBLP:journals/corr/GuhaSK15,
  author    = {Arjun Guha and
               Claudiu Saftoiu and
               Shriram Krishnamurthi},
  title     = {The Essence of JavaScript},
  journal   = {CoRR},
  volume    = {abs/1510.00925},
  year      = {2015},
  %url       = {http://arxiv.org/abs/1510.00925},
  archivePrefix = {arXiv},
  eprint    = {1510.00925},
  timestamp = {Mon, 13 Aug 2018 16:46:22 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/GuhaSK15.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@Book{EcmaScript:15,
  added-at = {2015-08-28T15:36:26.000+0200},
  address = {Geneva},
  author = {{Ecma International}},
  biburl = {https://www.bibsonomy.org/bibtex/28d67e2ebf933f3b6f684fcfb1f53b020/gron},
  edition = {6th},
  interhash = {8212a5bb4b7ac3137534f10d599cb526},
  intrahash = {8d67e2ebf933f3b6f684fcfb1f53b020},
  keywords = {JavaScript spec specification},
  month = {June},
  timestamp = {2015-08-28T15:37:30.000+0200},
  title = {{ECMAScript 2015 Language Specification}},
  %url = {http://www.ecma-international.org/ecma-262/6.0/ECMA-262.pdf},
  year = 2015
}

@Article{Pickering_2017,
  title={Profunctor Optics: Modular Data Accessors},
  volume={1},
  ISSN={2473-7321},
  %url={http://dx.doi.org/10.22152/programming-journal.org/2017/1/7},
  DOI={10.22152/programming-journal.org/2017/1/7},
  number={2},
  journal={The Art, Science, and Engineering of Programming},
  publisher={Aspect-Oriented Software Association (AOSA)},
  author={Pickering, Matthew and Gibbons, Jeremy and Wu, Nicolas},
  year={2017},
  month={Apr}
}

% Withhold citation until after deanomization
@Misc{GerbilPOOwithheld,
  author = {Author withheld},
  title = {Title withheld},
  url = {https://github.com/repository/withheld},
  year = 2020
}

@Misc{GerbilPOO,
  author = {François-René Rideau},
  title = {Gerbil-POO},
  year = 2020,
  url = {https://github.com/fare/gerbil-poo},
  urldate = {2021-04-06}
}

@Misc{ngnghm9,
  author = {François-René Rideau},
  title = {Build Systems and Modularity},
  year = 2016,
  url = {https://ngnghm.github.io/blog/2016/04/26/chapter-9-build-systems-and-modularity/},
  urldate = {2023-11-29}
}

@Misc{DrWhoFPIT,
  author = {Unknown},
  title = {Fixed Point in Time},
  year = 2021,
  url = {https://tardis.fandom.com/wiki/Fixed_point_in_time},
  urldate = {2021-03-14}
}
% Maybe cite the last episode of this story instead, that explains the concept?
% https://en.wikipedia.org/wiki/Earthshock
% On citing TV series:
% https://www.easybib.com/guides/citation-guides/how-do-i-cite-a/how-to-cite-movie-tv-netflix/

@Misc{WikiC3,
  title = "C3 linearization",
  author = "Wikipedia",
  year = 2021,
  url = {https://en.wikipedia.org/wiki/C3_linearization},
}

@InProceedings{poof2021,
  title = {Prototypes: Object-Orientation, Functionally},
  author = {François-René Rideau and Alex Knauth and Nada Amin},
  year = {2021},
  booktitle = {Scheme and Functional Programming Workshop},
  url = {https://github.com/metareflection/poof},
}

%%% ------>8------>8------>8------>8------>8------>8------>8------>8------>8------

%% Further Suggestions to maybe integrate in the paper:

% http://okmij.org/ftp/Computation/Subtyping/

% Barak Pearlmutter & Kevin Lang's Oaklisp https://github.com/barak/oaklisp

% Look at papers that cite Bracha 1990 on Semantic Scholar, including:
% https://www.semanticscholar.org/paper/Classes-and-mixins-Flatt-Krishnamurthi/c20e5f2a424b96209e6b400b23d319558932afa3
% https://www.semanticscholar.org/paper/Function-Inheritance-%3A-Monadic-Memoization-Mixins-Brown-Cook/d2bf5dc5c6c6bff91d10a0e2dceaaa13c2064765
% https://www.semanticscholar.org/paper/Object-Inheritance-Without-Classes-Jones-Homer/3dbc00e08dd1fa7c29faae9b2da544fb7e8d5579

% Modularity: ch4 and ch9 of taoup, e.g. http://www.catb.org/~esr/writings/taoup/html/ch04s02.html#orthogonality

% Semantics and Types for Objects with First-Class Member Names
% Joe Gibbs Politz, Arjun Guha, Shriram Krishnamurthi
% Foundations of Object-Oriented Languages, 2012
% https://cs.brown.edu/~sk/Publications/Papers/Published/pgk-sem-type-fc-member-name/


% Erik Ernst's work on gBeta:
% https://www.researchgate.net/publication/2806012_gbeta_-_a_Language_with_Virtual_Attributes_Block_Structure_and_Propagating_Dynamic_Inheritance

% Design Rules: The Power of Modularity,  by Baldwin & Clark

% Dart Book, by Gilad Bracha, Section 2.15 on mixins + examples all around, 5.9 on modularity

% StrongTalk.org still runs on Windows 10.

% William R. Cook: On Understanding Data Abstraction, Revisited

% CUE rejects inheritance, instead has value/pattern unification along a lattice: https://cuelang.org/docs/concepts/logic/

% https://www.piumarta.com/software/id-objmodel/objmodel2.pdf
% OOPSLA07

% https://link.springer.com/chapter/10.1007/3-540-07168-7_77
% InBook
@Misc{Dennis1975,
author="Dennis, Jack B.",
editor="Bauer, F. L.
and Dennis, J. B.
and Waite, W. M.
and Gotlieb, C. C.
and Graham, R. M.
and Griffiths, M.
and Helms, H. J.
and Morton, B.
and Poole, P. C.
and Tsichritzis, D.",
title="Modularity",
bookTitle="Software Engineering: An Advanced Course",
year="1975",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="128--182",
isbn="978-3-540-37502-9",
doi="10.1007/3-540-07168-7_77",
url="https://doi.org/10.1007/3-540-07168-7_77"
}
% We take the following statements to be the objectives of modular programming:
% 1. One must be able to convince himself of the correctness of a program module,
% independently of the context of its use in building larger units of software.
% 2. One must be able to conveniently put together program modules written under
% different authorities without knowledge of their inner workings.

@InProceedings{DeRemerKron1975,
author = {DeRemer, Frank and Kron, Hans},
title = {Programming-in-the Large versus Programming-in-the-Small},
year = {1975},
isbn = {9781450373852},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800027.808431},
doi = {10.1145/800027.808431},
abstract = {We distinguish the activity of writing large programs from that of writing small ones. By large programs we mean systems consisting of many small programs (modules), possibly written by different people.We need languages for programming-in-the-small, i.e. languages not unlike the common programming languages of today, for writing modules. We also need a “module interconnection language” for knitting those modules together into an integrated whole and for providing an overview that formally records the intent of the programmer(s) and that can be checked for consistency by a compiler.We explore the software reliability aspects of such an interconnection language. Emphasis is placed on facilities for information hiding and for defining layers of virtual machines.},
booktitle = {Proceedings of the International Conference on Reliable Software},
pages = {114–121},
numpages = {8},
keywords = {Module interconnection language, Accessibility, Visibility, Protection, Linking, Scope of definition, Virtual machine, Project management tool., Information hiding, External name, System hierarchy},
location = {Los Angeles, California}
}

%10.1145/361598.361623,
@Article{Parnas1972,
author = {Parnas, D. L.},
title = {On the Criteria to Be Used in Decomposing Systems into Modules},
year = {1972},
issue_date = {Dec. 1972},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/361598.361623},
doi = {10.1145/361598.361623},
abstract = {This paper discusses modularization as a mechanism for improving the flexibility and comprehensibility of a system while allowing the shortening of its development time. The effectiveness of a “modularization” is dependent upon the criteria used in dividing the system into modules. A system design problem is presented and both a conventional and unconventional decomposition are described. It is shown that the unconventional decompositions have distinct advantages for the goals outlined. The criteria used in arriving at the decompositions are discussed. The unconventional decomposition, if implemented with the conventional assumption that a module consists of one or more subroutines, will be less efficient in most cases. An alternative approach to implementation which does not have this effect is sketched.},
journal = {Commun. ACM},
month = {dec},
pages = {1053--1058},
numpages = {6},
keywords = {modules, software, KWIC index, modularity, software engineering, software design}
}

% Conway's Law
% Conway, Melvin (1968). "How do committees invent" (PDF). Datamation: 28–31.

@InProceedings{SullivanGriswoldCaiHallen2001,
author = {Sullivan, Kevin J. and Griswold, William G. and Cai, Yuanfang and Hallen, Ben},
title = {The Structure and Value of Modularity in Software Design},
year = {2001},
isbn = {1581133901},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/503209.503224},
doi = {10.1145/503209.503224},
abstract = {The concept of information hiding modularity is a cornerstone of modern software design thought, but its formulation remains casual and its emphasis on changeability is imperfectly related to the goal of creating added value in a given context. We need better explanatory and prescriptive models of the nature and value of information hiding. We evaluate the potential of a new theory---developed to account for the influence of modularity on the evolution of the computer industry---to inform software design. The theory uses design structure matrices to model designs and real options techniques to value them. To test the potential utility of the theory for software we apply it to Parnas's KWIC designs. We contribute an extension to design structure matrices, and we show that the options results are consistent with Parnas's conclusions. Our results suggest that such a theory does have potential to help inform software design.},
booktitle = {Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
pages = {99–108},
numpages = {10},
keywords = {real options, design structure matrix, modularity, software},
location = {Vienna, Austria},
series = {ESEC/FSE-9}
}

% Why won't InProceedings work in eoo* ?
@InProceedings{ASDF2,
  author = {François-René Rideau and Robert Goldman},
  title = {Evolving ASDF: More Cooperation, Less Coordination},
  year = {2010},
  booktitle = {International Lisp Conference},
  url = {http://common-lisp.net/project/asdf/doc/ilc2010draft.pdf}
}

% Original DEFSYSTEM is a 1990 paper, but hard to find independently from the others.
@TechReport{kantrowitz1991,
  author =       {Mark Kantrowitz},
  title =        {Portable Utilities for {C}ommon {L}isp},
  institution =  {School of Computer Science, Carnegie-Mellon University},
  number =       {CMU-CS-91-143},
  year =         1991,
  month =        May
}

@Misc{TopPL2022,
  author =       {GitHub},
  title =        {The top programming languages},
  url =          {https://octoverse.github.com/2022/top-programming-languages},
  year =         2022,
  note =         "[accessed 2024-01-04]"
}

% Traces (A cut at the “make isn't generic” problem)
% Gregor Kiczales
% 1993
% https://link.springer.com/chapter/10.1007/3-540-57342-9_64
@InProceedings{10.1007/3-540-57342-9_64,
author="Kiczales, Gregor",
editor="Nishio, Shojiro
and Yonezawa, Akinori",
title="Traces (A cut at the ``make isn't generic'' problem)",
booktitle="Object Technologies for Advanced Software",
year="1993",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="27--42",
abstract="Object-oriented techniques are a powerful tool for making a system end-programmer specializable. But, in cases where the system not only accepts objects as input, but also creates objects internally, specialization has been more difficult. This has been referred to as the ``make isn't generic problem.'' We present a new object-oriented language concept, called traces, that we have used successfully to support specialization in cases that were previously cumbersome.",
isbn="978-3-540-48075-4"
}
